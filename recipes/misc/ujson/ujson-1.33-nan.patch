diff -rupN lib/ultrajsondec.c ../../ujson-1.33/lib/ultrajsondec.c
--- lib/ultrajsondec.c	2013-06-10 12:32:20.000000000 +0200
+++ ../../ujson-1.33/lib/ultrajsondec.c	2015-07-13 15:53:57.101592284 +0200
@@ -111,6 +111,7 @@ FASTCALL_ATTR JSOBJ FASTCALL_MSVC decode
   JSUINT64 intValue;
   int chr;
   int decimalCount = 0;
+  double specialValue = 0;
   double frcValue = 0.0;
   double expNeg;
   double expValue;
@@ -134,6 +135,17 @@ FASTCALL_ATTR JSOBJ FASTCALL_MSVC decode
 
     switch (chr)
     {
+     case 'N': 
+         specialValue = NAN;
+         offset += 3;
+         goto BREAK_FRC_LOOP;
+         break; 
+     case 'I': 
+         specialValue = HUGE_VAL;
+         offset += 8;
+         goto BREAK_FRC_LOOP;
+         break; 
+
       case '0':
       case '1':
       case '2':
@@ -246,6 +258,11 @@ BREAK_FRC_LOOP:
   //FIXME: Check for arithemtic overflow here
   ds->lastType = JT_DOUBLE;
   ds->start = offset;
+  if (specialValue)
+  {	
+     return ds->dec->newDouble( ds->prv, specialValue *  intNeg);
+  }
+
   return ds->dec->newDouble (ds->prv, createDouble( (double) intNeg, (double) intValue, frcValue, decimalCount));
 
 DECODE_EXPONENT:
@@ -834,6 +851,8 @@ FASTCALL_ATTR JSOBJ FASTCALL_MSVC decode
       case '8':
       case '9':
       case '-':
+      case 'I':
+      case 'N':
         return decode_numeric (ds);
 
       case '[': return decode_array (ds);
diff -rupN lib/ultrajsonenc.c ../../ujson-1.33/lib/ultrajsonenc.c
--- lib/ultrajsonenc.c	2013-06-11 08:10:24.000000000 +0200
+++ ../../ujson-1.33/lib/ultrajsonenc.c	2015-07-13 15:34:53.058446954 +0200
@@ -519,16 +519,22 @@ int Buffer_AppendDoubleUnchecked(JSOBJ o
   int neg;
   double pow10;
 
-  if (value == HUGE_VAL || value == -HUGE_VAL)
+  if (value == HUGE_VAL)
   {
-    SetError (obj, enc, "Invalid Inf value when encoding double");
-    return FALSE;
+   enc->offset += sprintf(str, "Infinity");  
+   return TRUE;                                             
   }
 
-  if (!(value == value))
+  if (value == -HUGE_VAL)
   {
-    SetError (obj, enc, "Invalid Nan value when encoding double");
-    return FALSE;
+   enc->offset += sprintf(str, "-Infinity");  
+   return TRUE;                                             
+  }
+
+  if (! (value == value)) 
+  {
+   enc->offset += sprintf(str, "NaN");  
+   return TRUE;                                             
   }
 
   /* we'll work in positive values and deal with the
